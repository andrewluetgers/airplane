{"name":"Airplane","tagline":"Manage offline copies of your favourite websites for when you are on an airplane!","body":"Airplane\r\n--------\r\n\r\n[![npm version](https://badge.fury.io/js/airplane.svg)](http://badge.fury.io/js/airplane)\r\n[![dependencies](https://david-dm.org/jviotti/airplane.png)](https://david-dm.org/jviotti/airplane.png)\r\n[![Build Status](https://travis-ci.org/jviotti/airplane.svg?branch=master)](https://travis-ci.org/jviotti/airplane)\r\n\r\n![Airplane picture](https://raw.githubusercontent.com/jviotti/airplane/master/images/airplane.jpg)\r\n\r\nManage offline copies of your favourite websites for when you are on an airplane!\r\n\r\nI used to manually keep track and update offline copies of software documentation for when I'm working on an airplane, but the method simply didn't scale for me once I was keeping track of quite a lot of websites.\r\n\r\nMotivated by that, I created Airplane, an easy way to keep track of my offline sites, independently of how those offline copies were made.\r\n\r\nI now hit `airplane` on the terminal the night after the trip, and I'm sure I'll have up to date offline copies of all the websites I need on the place.\r\n\r\nQuickstart\r\n----------\r\n\r\nCreate a basic `~/.airplanerc.json`:\r\n\r\n```json\r\n{\r\n  \"websites\": {\r\n    \"lodash\": \"https://lodash.com\",   \r\n    \"sinonjs\": \"http://sinonjs.org\"\r\n  },\r\n  \"options\": {\r\n    \"destination\": \"/opt/www/airplane\"\r\n  },\r\n  \"commands\": {\r\n    \"clone\": \"mkdir -p <%- destination %> && cd <%- destination %> && httrack <%- url %>\",\r\n    \"update\": \"cd <%- destination %> && httrack --update <%- url %>\"\r\n  }\r\n}\r\n```\r\n\r\nIn this case, I'm keeping track of [lodash](https://lodash.com) and [sinonjs](http://sinonjs.org).\r\n\r\nI set my `destination` option to `/opt/www/airplane`. I have a web server configured to serve that directory locally.\r\n\r\nI like to use [httrack](http://www.httrack.com) to clone my websites, so I configured my `clone` and `update` commands accordingly. You can use any tool you like.\r\n\r\nTyping `airplane` in my terminal brings the fun:\r\n\r\n![Airplane in action](https://raw.githubusercontent.com/jviotti/airplane/master/images/screenshot.png)\r\n\r\nI can now open `http://localhost/lodash` or `http://localhost/sinonjs` to access the websites offline.\r\n\r\n\r\nInstallation\r\n------------\r\n\r\nInstall `airplane` by running:\r\n\r\n```sh\r\n$ npm install -g airplane\r\n```\r\n\r\nDocumentation\r\n-------------\r\n\r\n### ~/.airplanerc.json\r\n\r\nThe configuration file containing the sites you want to manage, and a few options.\r\n\r\n#### websites\r\n\r\nAn object containins websites to clone. Keys are the names, and values are the urls:\r\n\r\n```json\r\n...\r\n\"websites\": {\r\n  \"lodash\": \"https://lodash.com\",   \r\n  \"sinonjs\": \"http://sinonjs.org\"\r\n},\r\n...\r\n```\r\n\r\n#### options.destination\r\n\r\nThe destination directory in which to clone the specified websites.\r\n\r\nIs recommended that you setup a web server to locally serve that directory.\r\n\r\n```json\r\n...\r\n\"options\": {\r\n  \"destination\": \"/opt/www/airplane\"\r\n},\r\n...\r\n```\r\n\r\n#### commands.clone\r\n\r\nThe command to use to clone a website. It uses [UnderscoreJS templates syntax](http://underscorejs.org/#template) to interpolate:\r\n\r\n- `destination`: The final destination of the website. This is the concatenation between `options.destination` and the website name.\r\n- `url`: The url of the website.\r\n- `name`: The selected name for the website.\r\n\r\nI like to use [httrack](http://www.httrack.com), but you can use any other software to clone the website.\r\n\r\n```json\r\n...\r\n\"commands\": {\r\n  \"clone\": \"mkdir -p <%- destination %> && cd <%- destination %> && httrack <%- url %>\",\r\n}\r\n...\r\n```\r\n\r\n#### commands.update\r\n\r\nSame as `commands.clone`, but the update command is triggered when the website was already cloned in the past.\r\n\r\n```json\r\n...\r\n\"commands\": {\r\n  \"update\": \"cd <%- destination %> && httrack --update <%- url %>\"  \r\n}\r\n...\r\n```\r\n\r\nTests\r\n-----\r\n\r\nRun the test suite by doing:\r\n\r\n```sh\r\n$ gulp test\r\n```\r\n\r\nContribute\r\n----------\r\n\r\n- Issue Tracker: [github.com/jviotti/airplane/issues](https://github.com/jviotti/airplane/issues)\r\n- Source Code: [github.com/jviotti/airplane](https://github.com/jviotti/airplane)\r\n\r\nBefore submitting a PR, please make sure that you include tests, and that [coffeelint](http://www.coffeelint.org/) runs without any warning:\r\n\r\n```sh\r\n$ gulp lint\r\n```\r\n\r\nSupport\r\n-------\r\n\r\nIf you're having any problem, please [raise an issue](https://github.com/jviotti/airplane/issues/new) on GitHub.\r\n\r\nLicense\r\n-------\r\n\r\nThe project is licensed under the MIT license.\r\n\r\nFront illustration taken from [freedigitalphotos.net](http://www.freedigitalphotos.net).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}